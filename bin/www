#!/usr/bin/env node


var ident= "sorube";
var secret= "3ba84e92-dc9f-11e5-be0d-27778885886f";
var domain= "www.silvia-battleship.com";
var application= "default";
var room= 'default';
var secure = 1;


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('quiz:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var numClients = {};
var numClientsController = {};

var controller = io.of('/controller');

controller.on('connection', function(socket){
  console.log('[CONTROLLER SOCKET] user connected');

  socket.on('disconnect', function(){
    if(socket.room !== undefined){
      numClientsController[socket.room]--;
      if(numClientsController[socket.room] === 0){
          delete numClientsController[socket.room];
      }
      console.log('user disconnection', numClientsController);
    }
  });

  socket.on('join room', function(room){
    socket.room = room;
      console.log('THE CONTROLLER ROOM IS: ', room);
      if(room !== undefined){
        if(numClientsController[room] === undefined || numClientsController[room] === 0){
            numClientsController[room] = 1;
        } else{
            numClientsController[room]++;
        }
        console.log('[CS] numClients', numClientsController);
        if (numClientsController[room] === 1){
            socket.join(room);
        } else if (numClientsController[room] === 2) {
            io.sockets.in(room).emit('join', room);
            socket.join(room);
        } else { // max two clients
            socket.emit('full', room);
        }
        socket.emit('emit(): client ' + socket.id + ' joined room ' + room);
        socket.broadcast.emit('broadcast(): client ' + socket.id + ' joined room ' + room);
      }
  });

  socket.on('sendRoomName', function(room){
    console.log('[CS] received room name', room);
    controller.to(socket.room).emit('enteredName', room);
  });
  socket.on('startGame', function(msg){
    console.log('[CONTROLLER SOCKET] Start Game')
    controller.to(socket.room).emit('startedGame', msg);
  });

  socket.on('hitTarget', function(target){
    controller.to(socket.room).emit('checkTarget', target);
  });

  socket.on('sendResult', function(res){
    controller.to(socket.room).emit('checkRes', res);
  });

  socket.on('turn', function(turn){
    controller.to(socket.room).emit('setTurn', turn);
  });

  socket.on('endGame', function(win){
    controller.to(socket.room).emit('checkWin', win);
  });
});


//var room = io.of('/room');
// io.sockets
io.sockets.on('connection', function (socket){
  // convenience function to log server messages on the client
    function log(){
        var array = [">>> Message from server: "];
      for (var i = 0; i < arguments.length; i++) {
        array.push(arguments[i]);
      }
        socket.emit('log', array);
    }
    socket.on('disconnect', function(){
      if(socket.room !== undefined){
        numClients[socket.room]--;
        if(numClients[socket.room] === 0){
            delete numClients[socket.room];
        }
        console.log('user disconnection', numClients);
      }
    });
    socket.on('message', function (message) {
        //log('Got message:', message);
    // for a real app, would be room only (not broadcast)
        //socket.broadcast.to(message.channel).emit('message', message);
        //socket.broadcast.emit('message', message);
        socket.broadcast.to(socket.room).emit('message', message);
    });

    socket.on('create or join', function (room) {
        socket.room = room;
        console.log('THE ROOM IS: ', room);
        if(room !== undefined){

          if(numClients[room] === undefined || numClients[room] === 0){
              numClients[room] = 1;
          } else{
              numClients[room]++;
          }
          console.log('numClients', numClients);

          log('Room ' + room + ' has ' + numClients[room] + ' client(s)');
          log('Request to create or join room ' + room);

          if (numClients[room] === 1){
              socket.join(room);
              socket.emit('created', room);
          } else if (numClients[room] === 2 || numClients[room] === 3) {
              io.sockets.in(room).emit('join', room);
              socket.join(room);
              socket.emit('joined', room);
          } else { // max two clients
              socket.emit('full', room);
          }
          socket.emit('emit(): client ' + socket.id + ' joined room ' + room);
          socket.broadcast.emit('broadcast(): client ' + socket.id + ' joined room ' + room);
        }
    });

    socket.on('getCred', function(){
      var cred = 'ident='+ident+'&secret='+secret+'&domain='+domain+'&application='+application+'&room='+room+'&secure='+secure;
      socket.emit('ICE Candidates', cred);
    });

});








/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
